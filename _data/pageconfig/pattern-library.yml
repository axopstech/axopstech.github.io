tagline_intro: Pattern Library
tagline_main: "Common Patterns in Practice"
tagline_main2: "Solutions to challenges frequently encountered during client engagements"
#tagline_main: "Architectural Patterns in Practice"
tagline_here: Pattern Library
page_slug: /pattern-library
site_url: https://axopstech.github.io
services: 
  - 
    name: Cloud Engineering
    slug: /pattern-library/cloud-engineering
  - 
    name: Serverless Computing
    slug: /pattern-library/serverless-computing
  - 
    name: Application Engineering
    slug: /pattern-library/application-engineering
  - 
    name: Blockchain Development
    slug: /pattern-library/blockchain-development

industries:
  - 
    name: Energy
    slug: /pattern-library/industry/energy
  - 
    name: FinTech
    slug: /pattern-library/industry/fintech
  - 
    name: Financial Services
    slug: /pattern-library/industry/financial-services
  - 
    name: Social Media Sites
    slug: /pattern-library/industry/social-media-sites

scales:
  - 
    name: Startup
    slug: /pattern-library/scale/startup
  - 
    name: Enterprise
    slug: /pattern-library/scale/enterprise
  - 
    name: Small & Midsize Business
    slug: /pattern-library/scale/small-midsize-business

members:

  modernising-a-musical-monolith-with-aws-serverless.md:
    title: "Pattern: Modernising a Musical &#127925; Monolith with Serverless AWS"
    subtitle: "Revamping a Musical Instrument Retailer's Legacy Architecture with Serverless AWS"
    slug: modernising-a-musical-monolith-with-aws-serverless
    image_src: &site_url /assets/img/illustrations/pattern-library/modernising-a-musical-monolith-with-aws-serverless.jpg
    industry: "Consumer Goods"
    service: "Serverless Computing"
    scale: "Small & Midsize Business"
    technologies:
      - Lambda
      - API Gateway
      - Aurora Serverless
      - CloudFormation
    background: >
      <p>The client, an online musical instruments retailer, was running a legacy monolith web application backed by a MySQL database, 
      both running on a single Ubuntu Linux server 24x7.</p>
      <p>Their current architecture was becoming difficult to maintain and support due to limited developer resources. We were 
      asked to explore a migration of this application stack to a serverless architecture, to reduce costs while ensuring high availability, 
      scalability, and fault tolerance.</p>
    objectives:
      - Migrate legacy monolith web application and MySQL database to serverless architecture
      - Accommodate unpredictable traffic spikes at varying times of the year
      - Reduce costs in general, particularly those associated with the current architecture

    requirements:
      - High Availability
      - Scalability
      - Fault Tolerance
      - Cost Efficiency
      - IaC Deployments
      - Canary Testing 

    solution_design:
      - Decompose monolith application into microservices
      - Implement microservices as AWS Lambda functions
      - Manage APIs using Amazon API Gateway
      - Migrate MySQL database to Aurora Serverless
      - Store static assets using Amazon S3
      - Integrate Amazon CloudFront for caching and content delivery
      - Configure Auto Scaling for Aurora Serverless
      - Use AWS CloudFormation for IaC and deployment management

    results:
      - Improved website performance during peak periods
      - Successfully managed traffic spikes due to high availability and fault tolerance
      - Significant cost savings compared to previous EC2-based architecture
      - Streamlined deployment processes and increased development team efficiency
      - Controlled feature rollout using Amazon API Gateway's canary release deployments
      - Smooth transition for all users
